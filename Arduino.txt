// Incluindo as bibliotecas necessárias
#include <Ethernet.h>           // Biblioteca para Ethernet
#include <EthernetClient.h>     // Cliente Ethernet

// Definindo constantes

// Definir os pinos dos sensores ultrassônicos
#define TRIG_PIN_1  D1  // Pino de Trigger do sensor 1
#define ECHO_PIN_1  D2  // Pino de Echo do sensor 1
#define TRIG_PIN_2  D3
#define ECHO_PIN_2  D4
#define TRIG_PIN_3  D5
#define ECHO_PIN_3  D6
#define TRIG_PIN_4  D7
#define ECHO_PIN_4  D8
#define TRIG_PIN_5  D9
#define ECHO_PIN_5  D10

// Informações da rede Ethernet
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; // Endereço MAC do dispositivo
IPAddress ip(192, 168, 1, 177); // Endereço IP fixo do dispositivo (substitua conforme sua rede)

// Função para conectar no Ethernet
void setup_ethernet() {
  Serial.print("Conectando à rede Ethernet...");
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Falha ao obter endereço IP, configurando um IP fixo.");
    Ethernet.begin(mac, ip);
  }
  delay(1000);
  Serial.println("Ethernet conectada!");
  Serial.print("Endereço IP: ");
  Serial.println(Ethernet.localIP()); // Exibe o IP que o dispositivo recebeu
}

// Função para medir distância com sensores ultrassônicos
long getDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);  // Garante que o Trigger esteja em LOW
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);  // Envia um pulso de 10 microsegundos para o Trigger
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);  // Mede o tempo que o Echo ficou em HIGH
  long distance = duration * 0.034 / 2;    // Converte o tempo em distância (cm)

  return distance;  // Retorna a distância calculada
}

// Função de Setup (inicialização)
void setup() {
  Serial.begin(115200);  // Inicia o monitor serial
  setup_ethernet();  // Conecta ao Ethernet

  // Configurando os pinos dos sensores ultrassônicos
  pinMode(TRIG_PIN_1, OUTPUT);
  pinMode(ECHO_PIN_1, INPUT);
  pinMode(TRIG_PIN_2, OUTPUT);
  pinMode(ECHO_PIN_2, INPUT);
  pinMode(TRIG_PIN_3, OUTPUT);
  pinMode(ECHO_PIN_3, INPUT);
  pinMode(TRIG_PIN_4, OUTPUT);
  pinMode(ECHO_PIN_4, INPUT);
  pinMode(TRIG_PIN_5, OUTPUT);
  pinMode(ECHO_PIN_5, INPUT);
}

// Função Loop (execução contínua)
void loop() {
  // Capturando as distâncias dos sensores
  long distance1 = getDistance(TRIG_PIN_1, ECHO_PIN_1);
  long distance2 = getDistance(TRIG_PIN_2, ECHO_PIN_2);
  long distance3 = getDistance(TRIG_PIN_3, ECHO_PIN_3);
  long distance4 = getDistance(TRIG_PIN_4, ECHO_PIN_4);
  long distance5 = getDistance(TRIG_PIN_5, ECHO_PIN_5);

  // Exibindo os valores no monitor serial
  Serial.printf("Distância Sensor 1: %ld cm\n", distance1);
  Serial.printf("Distância Sensor 2: %ld cm\n", distance2);
  Serial.printf("Distância Sensor 3: %ld cm\n", distance3);
  Serial.printf("Distância Sensor 4: %ld cm\n", distance4);
  Serial.printf("Distância Sensor 5: %ld cm\n", distance5);

  // Se a distância de algum sensor mudar drasticamente (exemplo: estacionamento cheio)
  if (distance1 < 50 || distance2 < 50 || distance3 < 50 || distance4 < 50 || distance5 < 50) {
    String message = "Vagas estão ocupadas! Distâncias: " + String(distance1) + ", " + String(distance2) + ", " + String(distance3) + ", " + String(distance4) + ", " + String(distance5) + " cm";
    // Aqui você pode adicionar lógica alternativa para o envio de alertas ou salvar a mensagem para fins de monitoramento
    Serial.println(message);  // Exibe a mensagem no monitor serial
  }

  delay(5000);  // Atraso de 5 segundos entre as leituras
}

void setup() {
  Serial.begin(9600);  // Inicializa a comunicação serial
}

void loop() {
  // Exemplo de status de vagas: vagas 1, 2 e 4 ocupadas, vagas 3 e 5 livres
  int vagas[] = {1, 0, 1, 0, 1};
  
  // Envia o status das vagas no formato "1,0,1,0,1"
  for (int i = 0; i < 5; i++) {
    Serial.print(vagas[i]);
    if (i < 4) {
      Serial.print(",");
    }
  }
  Serial.println();  // Nova linha após enviar os dados

  delay(2000);  // Atraso de 2 segundos
}

